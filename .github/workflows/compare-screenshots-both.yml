name: Compare Screenshots

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 12 * * *'
  
env:
  PER_PAGE: 20

jobs:
  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      gitref: ${{ steps.gitref.outputs.gitref }}
    steps:
      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'bevyengine/bevy'
          ref: 'main'
      - name: Get Git Ref
        id: gitref
        run: |
          echo "gitref=`git rev-parse HEAD`" >> $GITHUB_OUTPUT

  take-screenshots:
    name: Take Screenshots
    needs: get-environment
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        # if all examples are not built, add a new page here
        page: [0, 1, 2, 3, 4, 5, 6, 7, 8]
        os: [ubuntu-latest, windows-latest]

    steps:

      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'bevyengine/bevy'
          ref: ${{ needs.get-environment.outputs.gitref }}

      - name: Cache (restore)
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      # temporary: fetch tools from PR
      - name: Checkout Bevy Tools
        uses: actions/checkout@v3
        with:
          repository: 'mockersf/bevy'
          ref: 'example-showcase-can-remove-desktop-mode'
          path: 'bevy-tools'
      - name: Copy Bevy tools to main
        run: |
          rm -r tools
          cp -r bevy-tools/tools/ tools

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Bevy dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update;
          DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq \
            libasound2-dev libudev-dev;

      - name: install xvfb, llvmpipe and lavapipe
        if: runner.os == 'linux'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:oibaf/graphics-drivers -y
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: Take Screenshots (Linux)
        id: screenshots-linux
        if: runner.os == 'linux'
        continue-on-error: true
        run: xvfb-run cargo run -p example-showcase -- --page ${{ matrix.page }} --per-page ${{ env.PER_PAGE }} run --screenshot --in-ci --ignore-stress-tests

      - name: Take Screenshots (Windows)
        id: screenshots-windows
        if: runner.os == 'windows'
        continue-on-error: true
        run: cargo run -p example-showcase -- --page ${{ matrix.page }} --per-page ${{ env.PER_PAGE }} run --screenshot --in-ci --ignore-stress-tests

      - name: Upload Generated Files
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-${{ runner.os }}-${{ matrix.page }}
          path: screenshots

      - name: Cache (save)
        if: steps.screenshots-linux.outcome == 'success' || steps.screenshots-windows.outcome == 'success'
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/            
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

  send-to-percy:
    name: Send screenshots to Percy
    runs-on: ubuntu-latest
    needs: [take-screenshots, get-environment]
    strategy:
      matrix:
        include:
          - os: Linux
            percy_key: PERCY_TOKEN_LINUX_VULKAN
            percy_project: dede4209/Screenshots-Linux-Vulkan
          - os: Windows
            percy_key: PERCY_TOKEN_WINDOWS_DX12
            percy_project: dede4209/Screenshots-Windows-DX12
    steps:
      
      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Move examples to the correct folder
        run: |
          mkdir screenshots-${{ matrix.os }}
          for screenshotfolder in screenshots-${{ matrix.os }}-*
          do
            echo $screenshotfolder
            rsync --verbose --archive $screenshotfolder/* screenshots-${{ matrix.os }}/
            rm -rf $screenshotfolder
          done

      - name: Send to Percy
        run: |
          npm install -g @percy/cli@latest
          npx percy upload screenshots-${{ matrix.os }}
        env:
          PERCY_TOKEN: ${{ secrets[matrix.percy_key] }}
          PERCY_COMMIT: ${{ needs.get-environment.outputs.gitref }}

      - name: Wait for result
        run: |
          npx percy build:wait --project ${{ matrix.percy_project }} --commit $PERCY_COMMIT --fail-on-changes --pass-if-approved
        env:
          PERCY_TOKEN: ${{ secrets[matrix.percy_key] }}
          PERCY_COMMIT: ${{ needs.get-environment.outputs.gitref }}
