name: (test) rerun

on:
  workflow_dispatch:
  
env:
  PER_PAGE: 20

jobs:
  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      pages: ${{ steps.env.outputs.pages }}
      gitref: ${{ steps.env.outputs.gitref }}
      date: ${{ steps.env.outputs.date }}
      linux_percy_project: ${{ steps.env.outputs.linux_percy_project }}
      windows_percy_project: ${{ steps.env.outputs.windows_percy_project }}
      updated: ${{ steps.version-check.outputs.updated }}
    steps:
      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'bevyengine/bevy'
          ref: 'main'
      - name: Get Environment
        id: env
        run: |
          example_count=`cat Cargo.toml | grep '\[\[example\]\]' | wc -l`
          page_count=$((example_count / ${{ env.PER_PAGE }} + 1))

          echo "gitref=`git rev-parse HEAD`" >> $GITHUB_OUTPUT
          echo "date=`date +%Y%m%d%H%M`" >> $GITHUB_OUTPUT
          echo "linux_percy_project=dede4209/Screenshots-Linux-Vulkan" >> $GITHUB_OUTPUT
          echo "windows_percy_project=dede4209/Screenshots-Windows-DX12" >> $GITHUB_OUTPUT
          echo "pages=`python -c \"import json; print(json.dumps([i for i in range($page_count)]))\"`" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: 'results'
          path: 'results'
      - name: Check if current Bevy version already ran
        id: version-check
        run: |
          gitref=`git rev-parse HEAD`
          updated=`if ls results/*-$gitref 1> /dev/null 2>&1; then echo "false"; else echo "true"; fi`
          echo "updated=$updated" >> $GITHUB_OUTPUT

  update-results:
    name: Update Results
    runs-on: ubuntu-latest
    needs: [get-environment]
    permissions:
      contents: write
    steps:
      
      - uses: actions/checkout@v3

      - name: Concatenate status
        run: |
          mkdir results
          mkdir results/${{ needs.get-environment.outputs.date }}-${{ needs.get-environment.outputs.gitref }}
          cp zut/* results/${{ needs.get-environment.outputs.date }}-${{ needs.get-environment.outputs.gitref }}/

      - name: Upload Aggregated Status
        uses: actions/upload-artifact@v3
        with:
          name: aggregated-status
          path: |
            results/${{ needs.get-environment.outputs.date }}-${{ needs.get-environment.outputs.gitref }}

  rerun-failed-examples:
    name: Rerun Failed Examples (without screenshot)
    needs: [get-environment, update-results]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:

      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'bevyengine/bevy'
          ref: ${{ needs.get-environment.outputs.gitref }}

      # temporary: fetch tools from PR
      - name: Checkout Bevy Tools
        uses: actions/checkout@v3
        with:
          repository: 'mockersf/bevy'
          ref: 'example-showcase-can-remove-desktop-mode'
          path: 'bevy-tools'
      - name: Copy Bevy tools to main
        run: |
          rm -r tools
          cp -r bevy-tools/tools/ tools

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Download Aggregated Status
        uses: actions/download-artifact@v3
        with:
          name: aggregated-status
          path: aggregated-status

      - name: Clean Up failures list
        run: |
          sed 's/.*\/\(.*\) - [.0-9]*/\1/g' aggregated-status/${{ runner.os }}-failures > failure-list
  
      - name: Install Bevy dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update;
          DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq \
            libasound2-dev libudev-dev;

      - name: install xvfb, llvmpipe and lavapipe
        if: runner.os == 'linux'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:oibaf/graphics-drivers -y
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: Take Screenshots (Linux)
        if: runner.os == 'linux'
        continue-on-error: true
        run: xvfb-run cargo run -p example-showcase -- run --in-ci --ignore-stress-tests --report-details --example-list failure-list

      - name: Take Screenshots (Windows)
        if: runner.os == 'windows'
        continue-on-error: true
        run: cargo run -p example-showcase -- run --in-ci --ignore-stress-tests --report-details --example-list failure-list
  
      - name: Upload Rerun Status
        uses: actions/upload-artifact@v3
        with:
          name: status-rerun-${{ runner.os }}
          path: |
            successes
            failures
            no_screenshots
            *.log

  # update-website:
  #   needs: update-results
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     pages: write
  #     id-token: write
  #   environment:
  #     name: github-pages
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: actions/checkout@v3
  #       with:
  #         ref: "results"
  #         path: "results"
  #     - name: Setup Rust
  #       uses: dtolnay/rust-toolchain@stable
  #     - name: Build website
  #       run: |
  #         cargo run -- results
  #         mkdir site
  #         mv index.html site/index.html
  #     - name: Store generated html
  #       uses: actions/upload-pages-artifact@v1
  #       with:
  #         path: ./site
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v1
