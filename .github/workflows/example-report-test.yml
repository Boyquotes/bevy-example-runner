name: (test) Example report - Status and Screenshots

on:
  workflow_dispatch:
  
env:
  PER_PAGE: 20

jobs:
  get-environment:
    name: Get Environment
    runs-on: ubuntu-latest
    outputs:
      pages: ${{ steps.env.outputs.pages }}
      gitref: ${{ steps.env.outputs.gitref }}
      date: ${{ steps.env.outputs.date }}
      linux_percy_project: ${{ steps.env.outputs.linux_percy_project }}
      windows_percy_project: ${{ steps.env.outputs.windows_percy_project }}
      updated: ${{ steps.version-check.outputs.updated }}
    steps:
      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'mockersf/bevy'
          ref: 'example-friendlier-to-CI'
      - name: Get Environment
        id: env
        run: |
          example_count=`cat Cargo.toml | grep '\[\[example\]\]' | wc -l`
          page_count=$((example_count / ${{ env.PER_PAGE }} + 1))

          echo "gitref=`git rev-parse HEAD`" >> $GITHUB_OUTPUT
          echo "date=`date +%Y%m%d%H%M`" >> $GITHUB_OUTPUT
          echo "linux_percy_project=dede4209/Screenshots-Linux-Vulkan" >> $GITHUB_OUTPUT
          echo "windows_percy_project=dede4209/Screenshots-Windows-DX12" >> $GITHUB_OUTPUT
          echo "pages=`python -c \"import json; print(json.dumps([i for i in range($page_count)]))\"`" >> $GITHUB_OUTPUT
      - uses: actions/checkout@v3
        with:
          ref: 'results'
          path: 'results'
      - name: Check if current Bevy version already ran
        id: version-check
        run: |
          gitref=`git rev-parse HEAD`
          updated=`if ls results/*-$gitref 1> /dev/null 2>&1; then echo "false"; else echo "true"; fi`
          echo "updated=$updated" >> $GITHUB_OUTPUT

  take-screenshots:
    name: Take Screenshots
    needs: get-environment
    if: needs.get-environment.outputs.updated == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        page: ${{ fromJSON(needs.get-environment.outputs.pages) }}
        os: [ubuntu-latest, windows-latest]

    steps:

      - name: Checkout Bevy main branch
        uses: actions/checkout@v3
        with:
          repository: 'mockersf/bevy'
          ref: ${{ needs.get-environment.outputs.gitref }}

      # temporary: fetch tools from PR
      - name: Checkout Bevy Tools
        uses: actions/checkout@v3
        with:
          repository: 'mockersf/bevy'
          ref: 'example-showcase-can-remove-desktop-mode'
          path: 'bevy-tools'
      - name: Copy Bevy tools to main
        run: |
          rm -r tools
          cp -r bevy-tools/tools/ tools

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install Bevy dependencies
        if: runner.os == 'linux'
        run: |
          sudo apt-get update;
          DEBIAN_FRONTEND=noninteractive sudo apt-get install --no-install-recommends -yq \
            libasound2-dev libudev-dev;

      - name: install xvfb, llvmpipe and lavapipe
        if: runner.os == 'linux'
        run: |
          sudo apt-get update -y -qq
          sudo add-apt-repository ppa:oibaf/graphics-drivers -y
          sudo apt-get update
          sudo apt install -y xvfb libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers

      - name: Run Examples (Linux)
        id: screenshots-linux
        if: runner.os == 'linux'
        continue-on-error: true
        run: xvfb-run cargo run -p example-showcase -- --page ${{ matrix.page }} --per-page ${{ env.PER_PAGE }} run --screenshot --in-ci --ignore-stress-tests --report-details

      - name: Run Examples (Windows)
        id: screenshots-windows
        if: runner.os == 'windows'
        continue-on-error: true
        run: cargo run -p example-showcase -- --page ${{ matrix.page }} --per-page ${{ env.PER_PAGE }} run --screenshot --in-ci --ignore-stress-tests --report-details

      - name: Log errors
        shell: pwsh
        run: |
          if (Get-Content no_screenshots) {
            perl -p -e 's/(.*) - [.0-9]*\n/\1, /g' no_screenshots > cleaned
            $no_screenshots = Get-Content .\cleaned -Raw
            echo "::warning title=No Screenshots ${{ runner.os }}/${{ matrix.page }}::$no_screenshots"
          }
          if (Get-Content failures) {
            perl -p -e 's/(.*) - [.0-9]*\n/\1, /g' failures > cleaned
            $failures = Get-Content .\cleaned -Raw
            echo "::error title=Failed To Run ${{ runner.os }}/${{ matrix.page }}::$failures"
          }

      - name: Upload Screenshots
        uses: actions/upload-artifact@v3
        with:
          name: screenshots-${{ runner.os }}-${{ matrix.page }}
          path: screenshots

      - name: Upload Status
        uses: actions/upload-artifact@v3
        with:
          name: status-${{ runner.os }}-${{ matrix.page }}
          path: |
            successes
            failures
            no_screenshots
